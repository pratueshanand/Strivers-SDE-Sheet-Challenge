class Solution {
public:
    int merge(vector<int>& nums, int low, int mid, int high){
        int i=low;
        int p=mid+1;
        int pairs=0;
        vector<int> t;
        for(int k=low;k<=mid;k++){
            while(p<=high && nums[k]>(long long)2 *nums[p]){
                p++;
            }
            pairs+=(p-(mid+1));
        }
        
        int j=mid+1;
        while(i<=mid && j<=high){
            if(nums[i]<=nums[j])
                t.push_back(nums[i++]);
            else
                t.push_back(nums[j++]);
        }
        while(i<=mid)
            t.push_back(nums[i++]);
        while(j<=high)
            t.push_back(nums[j++]);
        
        for (int i = low; i <= high; i++) {
            nums[i] = t[i - low];
        }
        return pairs;
    }
    int merge_sort(vector<int>& nums, int low, int high){
        if(low>=high){
            return 0;
        }
        int mid= (low+high)/2;
        int pairs= merge_sort(nums,low,mid);
            pairs+= merge_sort(nums,mid+1,high);
            pairs+= merge(nums,low,mid,high);
        return pairs;
    }
    int reversePairs(vector<int>& nums) {
        return merge_sort(nums,0,nums.size()-1);
    }
};
