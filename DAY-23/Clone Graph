/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:

    Node* dfs(Node* node, unordered_map<Node*,Node*> &mp){
        if(mp.find(node)==mp.end()){
            Node* copy=new Node(node->val);
            mp[node]=copy;
            for(auto adj: node->neighbors){
                Node* newNode=dfs(adj,mp);
                copy->neighbors.push_back(newNode);
            }
        }
        return mp[node];
    }
    Node* cloneGraph(Node* node) {
        if(!node) return NULL;
        unordered_map<Node*,Node*> mp;
        if(mp.find(node)==mp.end()){
            Node* copy=new Node(node->val);
            mp[node]=copy;
            for(auto adj: node->neighbors){
                Node* newNode=dfs(adj,mp);
                copy->neighbors.push_back(newNode);
            }
        }
        return mp[node];
    }
};
