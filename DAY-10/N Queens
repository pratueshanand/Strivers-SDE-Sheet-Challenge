bool issafe(int row, int col, int n, vector<vector<int>> ds){
    int drow = row;
    int dcol = col;
    while(drow>=0 && dcol>=0){
        if(ds[drow][dcol]==1)
            return false;
        drow--;
        dcol--;
    }

    drow = row;
    dcol = col;
    while(drow>=0){
        if(ds[drow][dcol]==1)
            return false;
        drow--;
    }

    drow = row;
    dcol = col;
    while(drow>=0 && dcol<n){
        if(ds[drow][dcol]==1)
            return false;
        drow--;
        dcol++;
    }
    return true;
}
void addBoard(vector<vector<int>> &board, vector<vector<int>> &res){
    vector<int> temp;
    int n = board.size();
    
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            temp.push_back(board[i][j]);
        }
    }

    res.push_back(temp);
}
void print(int row, int n, vector<vector<int>> &ans, vector<vector<int>> &ds){
    if(row==n){
        addBoard(ds,ans);
        return;
    }
    for(int col=0;col<n;col++){
        if(issafe(row,col,n,ds)){
            ds[row][col]=1;
            print(row+1,n,ans,ds);
            ds[row][col]=0;
        }
    }
}
vector<vector<int>> solveNQueens(int n) {
    // Write your code here.
    vector<vector<int>> ans;
    vector<vector<int>> ds(n,vector<int>(n,0));
    print(0,n,ans,ds);
    return ans;
}
