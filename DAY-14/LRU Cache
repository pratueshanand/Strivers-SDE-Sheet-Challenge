class LRUCache {
public:
    class node{
        public:
            int key;
            int val;
            node *prev;
            node *next;
        node(int key, int val){
            this->key=key;
            this->val=val;
        }
    };
    node* head=new node(-1,-1);
    node* tail=new node(-1,-1);
    int size;
    unordered_map<int,node*> mp;
    LRUCache(int capacity) {
        size=capacity;
        head->next=tail;
        tail->prev=head;
    }

    void addnode(node* newnode){
        node* temp=head->next;
        newnode->next=temp;
        head->next=newnode;
        newnode->prev=temp->prev;
        temp->prev=newnode;
    }

    void deletenode(node* delnode){
        node* temp1=delnode->prev;
        node* temp2=delnode->next;
        temp1->next=temp2;
        temp2->prev=temp1;
    }
    
    int get(int key) {
        if(mp.find(key)!=mp.end()){
            node* temp=mp[key];
            int res=temp->val;
            mp.erase(key);
            deletenode(temp);
            addnode(temp);
            mp[key]=head->next;
            return res;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key)!=mp.end()){
            node* temp=mp[key];
            mp.erase(key);
            deletenode(temp);
        }
        if(mp.size()==size){
            mp.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addnode(new node(key,value));
        mp[key]=head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
