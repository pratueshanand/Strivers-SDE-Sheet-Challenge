class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int> > res;
        sort(nums.begin(),nums.end());
        
        if (nums.empty())
            return res;
        
        for(int i=0;i<n;i++)
        {
            long long target3 = target-nums[i];
            for(int j=i+1;j<n;j++)
            {
                long long target2 = target3-nums[j];
                int front = j+1;
                int back = n-1;
                
                while(front<back){
                    int twosum = nums[front]+nums[back];
                    if(twosum > target2) back--;
                    else if(twosum < target2) front++;
                     else {
                    
                        vector<int> quadruplet(4, 0);
                        quadruplet[0] = nums[i];
                        quadruplet[1] = nums[j];
                        quadruplet[2] = nums[front];
                        quadruplet[3] = nums[back];
                        res.push_back(quadruplet);
                         
                         while(front<back && nums[front]==quadruplet[2]) front++;
                         while(front<back && nums[back]==quadruplet[3]) back--;   
                         
                     }
                }
                    
                while(j+1<n && nums[j+1]==nums[j]) j++;
            }
            while(i+1<n && nums[i+1]==nums[i]) i++;
        }
        return res;
    }
};
