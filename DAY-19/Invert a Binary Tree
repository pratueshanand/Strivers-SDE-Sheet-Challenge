#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
bool helper(TreeNode<int> *root, TreeNode<int> *leaf, stack<TreeNode<int>*> &st){
    st.push(root);
    if(!root->left && !root->right){
        if(root->data == leaf->data){
            return true;
        }
        else
            st.pop();
            return false;
    }
    bool lh=false,rh=false;
    if(root->left) lh=helper(root->left,leaf,st);
    if(lh) return true;
    if(root->right) rh=helper(root->right,leaf,st);
    if(rh) return true;
    st.pop();
    return false;
}
TreeNode<int> * invertBinaryTree(TreeNode<int> *root, TreeNode<int> *leaf)
{
	// Write your code here.
    if(!root) return NULL;
    stack<TreeNode<int>*> st;
    helper(root,leaf,st);

    TreeNode<int> *newroot=st.top();
    st.pop();

    TreeNode<int> *parent=newroot;
    while(!st.empty()){
        TreeNode<int>* cur=st.top();
        st.pop();
        if(cur->left==parent){
            cur->left=NULL;
        }
        else{
            cur->right=cur->left;
            cur->left=NULL;
        }
        parent->left=cur;
        parent=parent->left;
    }
    return newroot;
}
