/************************************************************
   
   Following is the TreeNode class structure
   
   class TreeNode<T>
   { 
   public:
        T data; 
        TreeNode<T> *left;
        TreeNode<T> *right;
   
        TreeNode(T data) 
  		{ 
            this -> data = data; 
            left = NULL; 
            right = NULL; 
        }
   };
   
   
 ************************************************************/
#include<bits/stdc++.h>
TreeNode<int>* formtree(vector<int>& inorder, int inst, int inen, vector<int>& postorder, int post, int poen, map<int, int>&m){
    if(inst>inen || post>poen){return NULL;}
    TreeNode<int>* root= new TreeNode<int>(postorder[poen]);
    int inroot=m[root->data];
    int rght=inroot-inst;
    root->left=formtree(inorder,inst,inroot-1,postorder,post,post+rght-1,m);
    root->right=formtree(inorder,inroot+1,inen,postorder,post+rght,poen-1,m);
    return root;
}

TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) 
{
	// Write your code here.
     map<int, int>m;
     for(int i=0; i<inOrder.size(); i++)
          {m[inOrder[i]]=i;}
     TreeNode<int>* root=formtree(inOrder, 0, inOrder.size()-1, postOrder, 0, postOrder.size()-1, m);
     return root;
}
