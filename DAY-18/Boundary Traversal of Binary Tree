#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isleaf(TreeNode<int>* root){
    if(!root->left && !root->right) return true;
    return false;
}
void leftnodes(TreeNode<int>* root, vector<int> &ans){
    TreeNode<int>* cur=root->left;
    while(cur){
        if(!isleaf(cur)) ans.push_back(cur->data);
        if(cur->left) cur=cur->left;
        else cur=cur->right;
    }
}
void leaf(TreeNode<int>* root, vector<int> &ans){
    if (isleaf(root)) {
        ans.push_back(root->data);
        return;
    }
    if(root->left) leaf(root->left,ans);
    if(root->right) leaf(root->right,ans);
}
void rightnodes(TreeNode<int>* root, vector<int> &ans){
    TreeNode<int>* cur=root->right;
    vector<int> res;
    while(cur){
        if(!isleaf(cur)) res.push_back(cur->data);
        if(cur->right) cur=cur->right;
        else cur=cur->left;
    }
    for(int i=res.size()-1;i>=0;i--){
        ans.push_back(res[i]);
    }
}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int> ans;
    if(!root) return ans;
    if (!isleaf(root)) ans.push_back(root->data);
    leftnodes(root,ans);
    leaf(root,ans);
    rightnodes(root,ans);
    return ans;
}
